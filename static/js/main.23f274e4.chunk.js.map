{"version":3,"sources":["constants.js","reducers.js","sagas.js","store.js","utils/index.ts","components/PublicRoute.tsx","components/PrivateRoute.tsx","components/SignIn.tsx","actions.js","components/Book.tsx","containers/Home.tsx","containers/App.tsx","reportWebVitals.ts","index.tsx"],"names":["LOG_IN","LOG_OUT","GET_PHONES","ROUTES","initialStateLogUser","isLogged","initialStatePhones","phones","rootReducer","combineReducers","logUser","state","action","type","setPhones","payload","helloSaga","incrementAsync","watchIncrementAsync","rootSaga","delay","ms","Promise","res","setTimeout","console","log","put","takeEvery","all","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","logger","run","TOKEN_KEY","isInStorage","localStorage","getItem","PublicRoute","Component","component","restricted","rest","render","props","to","pathname","PrivateRoute","getState","reduxForm","form","history","reset","useForm","register","handleSubmit","watch","errors","formState","emailValue","onSubmit","nowLogged","email","dispatch","setItem","push","className","validate","required","value","length","isCorrect","test","message","capital","search","small","digits","password","Book","useEffect","map","i","id","name","phone","last","slice","first","Home","handleLogout","removeItem","onClick","connect","path","exact","SignIn","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.23f274e4.chunk.js","sourcesContent":["export const LOG_IN = 'LOG_IN';\nexport const LOG_OUT = 'LOG_OUT';\nexport const GET_PHONES = 'GET_PHONES';\n\nexport const ROUTES = {\n    main: '/',\n    home: '/home',\n    login: '/login',\n    projectName: '/phone_book' // webstorm adds it\n}","import { combineReducers } from 'redux';\nimport { LOG_IN, LOG_OUT, GET_PHONES } from './constants';\n\nexport const initialStateLogUser = {\n  isLogged: false,\n};\n\nexport const logUser = (state = initialStateLogUser, action) => {\n  switch (action.type) {\n    case LOG_IN:\n      return {\n        ...state,\n        isLogged: true,\n      };\n    case LOG_OUT:\n      return {\n        ...state,\n        isLogged: false,\n      };\n    default:\n      return state;\n  }\n};\nexport const initialStatePhones = {\n  phones: [],\n};\nexport const setPhones = (state = initialStatePhones, action) => {\n  switch (action.type) {\n    case GET_PHONES:\n      return {\n        ...state,\n        phones: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const rootReducer = combineReducers({\n  logUser,\n  setPhones\n});\n","import { put, takeEvery, all } from 'redux-saga/effects'\n\nconst delay = (ms) => new Promise(res => setTimeout(res, ms))\n\nfunction* helloSaga() {\n    console.log('Hello Sagas!')\n}\n\n// Our worker Saga: will perform the async increment task\nfunction* incrementAsync() {\n    yield delay(1000)\n    yield put({ type: 'INCREMENT' })\n}\n\n// Our watcher Saga: spawn a new incrementAsync task on each INCREMENT_ASYNC\nfunction* watchIncrementAsync() {\n    yield takeEvery('INCREMENT_ASYNC', incrementAsync)\n}\n\n// notice how we now only export the rootSaga\n// single entry point to start all Sagas at once\nexport default function* rootSaga() {\n    yield all([\n        helloSaga(),\n        watchIncrementAsync()\n    ])\n}","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport {logger} from \"redux-logger/src\";\nimport { rootReducer} from './reducers';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from './sagas';\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(logger, sagaMiddleware)));\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","const TOKEN_KEY = 'current user';\n\nexport const loginToStorage = (email: string): void => {\n  localStorage.setItem(TOKEN_KEY, email);\n};\n\nexport const logoutOfStorage = (): void => {\n  localStorage.removeItem(TOKEN_KEY);\n};\n\nexport const isInStorage = (): boolean => {\n  if (localStorage.getItem(TOKEN_KEY)) {\n    return true;\n  }\n\n  return false;\n};\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { isInStorage } from '../utils';\nimport {ROUTES} from \"../constants\";\ntype PublicRouteProps = {\n  component: any;\n  restricted: any;\n  path: string;\n  exact: boolean;\n};\nconst PublicRoute = ({ component: Component, restricted, ...rest }: PublicRouteProps): React.ReactElement => {\n  return (\n    <Route\n      {...rest}\n      render={props => (isInStorage() && restricted ? <Redirect to={{pathname: ROUTES.main}} /> : <Component {...props} />)}\n    />\n  );\n};\n\nexport default PublicRoute;\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { IPerson } from '../containers/App';\nimport store from \"../store\";\nimport {ROUTES} from '../constants'\n\ntype PrivateRouteProps = {\n  component: any;\n  phones: Array<IPerson>;\n  /*getPhonesHandler: any;*/\n  path: string;\n  exact: boolean;\n};\n\nconst PrivateRoute = ({\n  component: Component,\n  phones,\n  /*getPhonesHandler,*/\n  ...rest\n}: PrivateRouteProps): React.ReactElement => {\n    const state: any = store.getState();\n  return (\n    <Route\n      {...rest}\n      render={props =>\n          state.logUser.isLogged ? (\n          <Component phones={phones} /*getPhonesHandler={getPhonesHandler}*/ {...props} />\n        ) : (\n          <Redirect to={{pathname: ROUTES.login}} />\n        )\n      }\n    />\n  );\n};\n\nexport default PrivateRoute;\n\n","import React, {FC} from 'react'\nimport { Field, reduxForm/*, formValueSelector */} from 'redux-form'\nimport store from \"../store\";\n//import {LOG_IN} from \"../constants\";\nimport {logIn} from \"../actions\";\nimport {loginToStorage} from \"../utils\";\nimport {useForm} from \"react-hook-form\";\nimport {ROUTES} from \"../constants\";\n\nlet SignIn:FC = (props: any) => {\n    const { history, reset} = props;\n    const { register, handleSubmit, watch, formState: { errors } } = useForm();\n    const state = store.getState()\n    const emailValue = watch(\"email\");\n\n    //was props: RouteComponentProps\n    const handleLogin = () => {\n       //props.dispatch({ type: LOG_IN })\n       //store.dispatch({ type: LOG_IN })\n        logIn(true);\n        loginToStorage(emailValue);\n        history.push(ROUTES.main);\n    }\n\n    return (\n        <form onSubmit={handleSubmit(handleLogin)} className=\"form\"> {/* your form submit function which will invoke after successful validation*/}\n            {/* register your input into the hook by invoking the \"register\" function */}\n            <input\n                {...register(\"email\", { //name=== errors obj property containing all validation errors for this specific field\n                    validate: {\n                        required: value => value.length || 'This field is required', //so validation need to return false to be passed\n                        isCorrect: value => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) || 'Invalid email address'\n                    }\n                })}\n                className=\"form__field\"\n            />\n            {/* errors will return when field validation fails  */}\n            {errors.email && <span>{errors.email?.message}</span>} {/*errors.email?.message - one entity for all possible messages*/}\n            {/* include validation with required or other standard HTML validation rules */}\n            <input\n                {...register(\"password\", {\n                    validate: {\n                        required: value => value.length || 'This field is required',\n                        length: value => value.length > 8 || 'Needs at least 8 symbols',\n                        capital: value => value.search(/[A-Z]/) !== -1 || 'Must contain at least 1 capital letter',\n                        small: value => value.search(/[a-z]/) !== -1 || 'Must contain at least 1 small letter',\n                        digits: value => value.search(/[0-9]/) !== -1 || 'Must contain at least 1 digit',\n                    }\n                })}\n                className=\"form__field\"/>\n            {errors.password && <span>{errors.password?.message}</span>}\n            <input type=\"submit\" className=\"form__button\"/>\n        </form>\n    )\n}\n\nexport default reduxForm({\n    form: 'fieldLevelValidation', // a unique identifier for this form\n})(SignIn)\n\n\n","import { LOG_IN, LOG_OUT, GET_PHONES } from './constants';\n//import { IPerson } from './containers/App';\nimport store from \"./store\";\n\nexport const logIn = (nowLogged) =>  {\n  store.dispatch({ type: LOG_IN, payload: nowLogged });\n};\n\nexport const logOut = () => {\n  store.dispatch({type: LOG_OUT});\n};\n\nexport const getPhones = () => dispatch => {\n  async function getPhonesHandler() {\n    return fetch('http://localhost:3000/phones.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    })\n      .then(response => response.json())\n      .then(data =>\n        dispatch({\n          type: GET_PHONES,\n          payload: data.phones.sort((a, b) => a.name.last.localeCompare(b.name.last)),\n        })\n      )\n      .catch(e => {\n        console.log(e.toString());\n      });\n  }\n};\n","import React, { useEffect } from 'react';\nimport { IPerson } from '../containers/App';\nimport { Link } from 'react-router-dom';\n\ninterface BookProps {\n  phones: Array<IPerson>;\n  //getPhonesHandler: () => void;\n}\n\nconst Book = ({ phones /*getPhonesHandler */ }: BookProps): React.ReactElement => {\n  useEffect(() => {\n    //getPhonesHandler();\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <main className='main'>\n      <div className='container'>\n        <ul>\n          {phones?.map(({ id, name, phone }: IPerson, i) => {\n            if (phones[i - 1]?.name.last.slice(0, 1) !== phones[i]?.name.last.slice(0, 1)) {\n              return (\n                <li key={id} className='withSeparator'>\n                  <p>{phones[i].name.last.slice(0, 1)} </p>\n                  <ul className='firstInRow'>\n                    <li>\n                      {name.last} {name.first}, phone: {phone}\n                    </li>\n                  </ul>\n                </li>\n              );\n            } else {\n              return (\n                <li key={id}>\n                  {name.last} {name.first}, phone: {phone}\n                </li>\n              );\n            }\n          })}\n        </ul>\n        <Link to='/home'>Go home</Link>\n      </div>\n    </main>\n  );\n};\n\nexport default Book;\n","import React, { Component } from 'react';\nimport { logoutOfStorage,  isInStorage } from '../utils';\nimport { Link} from 'react-router-dom';\nimport store from \"../store\";\n//import {LOG_OUT} from \"../constants\";\nimport {logOut} from \"../actions\";\nimport {ROUTES} from \"../constants\";\n\n// RouteComponentProps<MatchParams>\nconst Home = () =>  {\n  const handleLogout = (): void => {\n    logoutOfStorage();\n    logOut();\n    //store.dispatch({type: LOG_OUT})\n    //props.dispatch({type: LOG_OUT})\n  };\n  const state = store.getState()\n  return (\n      <div>\n        <h1>Home</h1>\n        {state.logUser.isLogged || isInStorage()  ? (\n            <button onClick={() => handleLogout()}>Click here to log out</button>\n        ) : (\n            <Link to={{pathname: ROUTES.login}}>Go to sign in page</Link>\n        )}\n      </div>\n  );\n\n}\n\nexport default Home;\n","import React, {useEffect } from 'react';\nimport './App.css';\nimport { Redirect, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport PublicRoute from '../components/PublicRoute';\nimport PrivateRoute from '../components/PrivateRoute';\nimport SignIn from '../components/SignIn';\nimport Book from '../components/Book';\nimport Home from './Home';\nimport store from \"../store\";\nimport {ROUTES} from \"../constants\";\n\ninterface IName {\n  first: string;\n  last: string;\n}\n\nexport interface IPerson {\n  id: string;\n  isActive: boolean;\n  age?: number;\n  name: IName;\n  company?: string;\n  email?: string;\n  phone: string;\n  address?: string;\n  registered: string;\n}\ninterface GlobalState {\n    logUser: ILogUser,\n    setPhones: ISetPhones,\n}\ninterface ILogUser {\n    isLogged: boolean\n}\ninterface ISetPhones {\n    phones: Array<IPerson>\n}\ninterface CounterProps { //saga demo component props\n    value: GlobalState,\n    onIncrement: () => any,\n    onDecrement: () => any,\n    onIncrementAsync: () => any,\n}\nconst mapStateToProps = (state: any) => ({\n    phones: state.setPhones.phones,\n    isLogged: state.logUser.isLogged,\n    form: state.form\n});\n\nconst action = (type: any /*обычно это строка, в саге ??*/) => store.dispatch({type});\nconst App = ({ phones }: { phones: Array<IPerson> }): React.ReactElement => {\n  return (\n      <>\n        <Switch>\n          <PublicRoute restricted={false} component={Home} path={ROUTES.home} exact />\n          <PublicRoute restricted={true} component={SignIn} path={ROUTES.login} exact />\n          <PrivateRoute component={Book} path={ROUTES.main} exact phones={phones} />\n          <Redirect path={ROUTES.projectName} to={{pathname: ROUTES.login}} />\n        </Switch>\n          {/*<Counter\n              value={store.getState()}\n              onIncrement={() => action('INCREMENT')}\n              onDecrement={() => action('DECREMENT')}\n              onIncrementAsync={() => action('INCREMENT_ASYNC')}\n          />*/},\n      </>\n  );\n};\nconst Counter = ({ value, onIncrement, onDecrement, onIncrementAsync }: CounterProps) => {\n    console.log(value) //Global State??\n    return (\n        <div>\n            <button onClick={onIncrementAsync}>\n                Increment after 1 second\n            </button>\n            {' '}\n            <button onClick={onIncrement}>\n                Increment\n            </button>\n            {' '}\n            <button onClick={onDecrement}>\n                Decrement\n            </button>\n            <hr/>\n            <div>\n                Clicked: {value} times\n            </div>\n        </div>\n    )\n}\n\n/*getPhonesHandler = {onSetPhones}*/\nexport default connect(mapStateToProps)(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root') as HTMLElement\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}