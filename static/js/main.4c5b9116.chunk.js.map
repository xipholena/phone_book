{"version":3,"sources":["redux/constants.ts","redux/reducers.ts","redux/actions.ts","utils/index.ts","redux/sagas.ts","redux/store.ts","components/PublicRoute.tsx","components/PrivateRoute.tsx","components/SignIn.tsx","components/Book.tsx","containers/Home.tsx","containers/App.tsx","reportWebVitals.ts","index.tsx"],"names":["LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILED","LOG_OUT","ROUTES","GET_USERS_REQUESTED","GET_USERS_SUCCESS","GET_USERS_FAILED","initialStateLogUser","isLogged","isLoading","email","error","initialStateFetch","users","loading","rootReducer","combineReducers","logUser","state","action","type","message","logInRequest","logOut","getUsersSuccess","TOKEN_KEY","fetchUsers","logInSaga","logOutSaga","handleLogInOut","userSaga","rootSaga","getPhones","fetch","headers","Accept","then","response","json","data","catch","e","console","log","toString","delay","call","put","localStorage","setItem","removeItem","takeEvery","all","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","PublicRoute","Component","component","restricted","rest","useSelector","render","props","to","pathname","PrivateRoute","SignIn","useForm","register","handleSubmit","watch","errors","formState","emailValue","dispatch","useDispatch","onSubmit","className","validate","required","value","length","isCorrect","test","capital","search","small","digits","password","Book","phones","sort","a","b","name","last","localeCompare","useEffect","map","i","id","phone","slice","first","Home","onClick","connect","getItem","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"qOAAaA,EAAiB,iBACjBC,EAAiB,iBACjBC,EAAgB,gBAEhBC,EAAU,UAGVC,EACL,IADKA,EAEL,QAFKA,EAGJ,SAHIA,EAIE,cAGFC,EAAsB,sBACtBC,EAAoB,oBACpBC,EAAmB,mBCLnBC,EAAsB,CACjCC,UAAU,EACVC,WAAW,EACXC,MAAO,GACPC,MAAO,MA8CHC,EAAoB,CACxBC,MAAO,GACPC,SAAS,EACTH,MAAO,MAuCF,IAAMI,EAAcC,0BAAgB,CACzCC,QAzEqB,WAA8E,IAA7EC,EAA4E,uDAApEX,EAAqBY,EAA+C,uCAClG,OAAQA,EAAOC,MACb,KAAKrB,EACH,OAAO,2BACFmB,GADL,IAEET,WAAW,IAEf,KAAKT,EACH,OAAO,2BACFkB,GADL,IAEET,WAAW,EACXD,UAAU,IAEd,KAAKP,EACH,OAAO,2BACFiB,GADL,IAEET,WAAW,EACXD,UAAU,EACVG,MAAOQ,EAAOE,UAElB,KAAKnB,EACH,OAAO,2BACFgB,GADL,IAEEV,UAAU,IAEd,QACE,OAAOU,IAgDXL,MA1BK,WAAmF,IAApEK,EAAmE,uDAA3DN,EAAmBO,EAAwC,uCACvF,OAAQA,EAAOC,MACb,KAAKhB,EACH,OAAO,2BACFc,GADL,IAEEJ,SAAS,IAEb,KAAKT,EACH,OAAO,2BACFa,GADL,IAEEJ,SAAS,EACTD,MAAOM,EAAON,QAElB,KAAKP,EACH,OAAO,2BACFY,GADL,IAEEJ,SAAS,EACTH,MAAOQ,EAAOE,UAElB,QACE,OAAOH,M,gCC5DAI,EAAe,iBAA8B,CAAEF,KAAMrB,IAGrDwB,EAAS,iBAAoB,CAAEH,KAAMlB,IAGrCsB,EAAkB,SAACX,GAAD,MAAyC,CAAEO,KAAMf,EAAmBQ,MAAOA,IC7CpGY,EAAY,e,WCgCRC,G,WAWAC,G,WASAC,G,WAKAC,G,WAMAC,G,WAKeC,GAlDnBC,EAAY,WAChB,OAAOC,MAFG,oCAEQ,CAChBC,QAAS,CACP,eAAgB,mBAChBC,OAAQ,sBAGTC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIA,KACbC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EAAEG,gBAIpB,SAAUlB,EAAWP,GAArB,uEAGI,OAHJ,kBAGU0B,YAAM,KAHhB,OAIkB,OAJlB,SAIwBC,YAAKd,GAJ7B,OAKI,OADMnB,EAJV,gBAKUkC,YAAIvB,EAAgBX,IAL9B,+BAOI,OAPJ,oCAOUkC,aFOqBN,EEPF,EAAD,GFO4B,CAAErB,KAAMd,EAAkBe,QAASoB,EAAEpB,WEd7F,kCFc8B,IAACoB,IEd/B,iBAWA,SAAUd,EAAUR,GAApB,iEAEI,OAFJ,kBAEU0B,YAAM,KAFhB,OAII,OD5CFG,aAAaC,QAAQxB,EAAqB,cCwC5C,SAIUsB,YFPsC,CAAE3B,KAAMpB,IEGxD,8BAMI,OANJ,mCAMU+C,aFRkBN,EEQF,EAAD,GFR4B,CAAErB,KAAMnB,EAAeoB,QAASoB,EAAEpB,WEEvF,kCFF2B,IAACoB,IEE5B,gBASA,SAAUb,EAAWT,GAArB,iEAEE,OD/CA6B,aAAaE,WAAWzB,GC6C1B,SAEQsB,YAAIxB,KAFZ,uCAKA,SAAUM,IAAV,iEAEE,OAFF,SAEQsB,YAAUpD,EAAgB4B,GAFlC,OAGE,OAHF,SAGQwB,YAAUjD,EAAS0B,GAH3B,uCAMA,SAAUE,IAAV,iEAEE,OAFF,SAEQqB,YAAU/C,EAAqBsB,GAFvC,uCAKe,SAAUK,IAAV,iEACb,OADa,SACPqB,YAAI,CACRtB,IACAD,MAHW,uCC9Df,IAAMwB,EAAiBC,cAEjBC,EAAQC,sBAAYzC,EAAa0C,8BAAoBC,0BAAgBL,KAE3EA,EAAeM,IAAI5B,GAEZ,IAEQwB,I,oCCQAK,EAZK,SAAC,GAAyF,IAA5EC,EAA2E,EAAtFC,UAAsBC,EAAgE,EAAhEA,WAAeC,EAAiD,0CACrG9C,EAAa+C,aAAY,SAAA/C,GAAK,OAAIA,KACxC,OACE,cAAC,IAAD,2BACM8C,GADN,IAEEE,OAAQ,SAAAC,GAAK,OACXjD,EAAMD,QAAQT,UAAYuD,EAAa,cAAC,IAAD,CAAUK,GAAI,CAAEC,SAAUlE,KAAoB,cAAC0D,EAAD,eAAeM,SCQ7FG,GAbM,SAAC,GAA8E,IAAjET,EAAgE,EAA3EC,UAAyBE,EAAkD,6BAC3F9C,EAAa+C,aAAY,SAAA/C,GAAK,OAAIA,KAExC,OACE,cAAC,IAAD,2BACM8C,GADN,IAEEE,OAAQ,SAAAC,GAAK,OACXjD,EAAMD,QAAQT,SAAW,cAACqD,EAAD,eAAeM,IAAY,cAAC,IAAD,CAAUC,GAAI,CAAEC,SAAUlE,U,SCbzEoE,GAAa,WAA2B,IAAD,IAClD,EAKIC,eAJFC,EADF,EACEA,SACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,MACaC,EAJf,EAIEC,UAAaD,OAETE,EAAaH,EAAM,SACnBI,EAAWC,cACXvE,EAAYwD,aAAY,SAAC/C,GAAD,OAA4BA,EAAMD,QAAQR,aAKxE,OACE,qCACE,uBAAMwE,SAAUP,GANA,WAClBK,EAASzD,EAAawD,OAKuBI,UAAU,OAArD,UACG,IAGD,iDACMT,EAAS,QAAS,CAEpBU,SAAU,CACRC,SAAU,SAAAC,GAAK,OAAIA,EAAMC,QAAU,0BACnCC,UAAW,SAAAF,GAAK,MAAI,4CAA4CG,KAAKH,IAAU,6BALrF,IAQEH,UAAU,iBAGXN,EAAOlE,OAAS,yCAAOkE,EAAOlE,aAAd,aAAO,EAAcW,UAAiB,IAGvD,iDACMoD,EAAS,WAAY,CACvBU,SAAU,CACRC,SAAU,SAAAC,GAAK,OAAIA,EAAMC,QAAU,0BACnCA,OAAQ,SAAAD,GAAK,OAAIA,EAAMC,OAAS,GAAK,4BACrCG,QAAS,SAAAJ,GAAK,OAA+B,IAA3BA,EAAMK,OAAO,UAAmB,0CAClDC,MAAO,SAAAN,GAAK,OAA+B,IAA3BA,EAAMK,OAAO,UAAmB,wCAChDE,OAAQ,SAAAP,GAAK,OAA+B,IAA3BA,EAAMK,OAAO,UAAmB,qCAPvD,IAUER,UAAU,iBAEXN,EAAOiB,UAAY,yCAAOjB,EAAOiB,gBAAd,aAAO,EAAiBxE,UAC5C,uBAAOD,KAAK,SAAS8D,UAAU,oBAEhCzE,EACC,qBAAKyE,UAAU,SAAf,SACE,qBAAKA,UAAU,kBAAf,SACE,qBAAKA,UAAU,iBAAf,SACE,mBAAGA,UAAU,cAAb,qCAKN,iCCHOY,GApDE,WACf,IAAMf,EAAWC,cACXe,EAAS9B,aAAY,SAAC/C,GAAD,uBACzBA,EAAML,MAAMA,MAAMkF,cADO,aACzB,EAA0BC,MAAK,SAACC,EAAQC,GAAT,OAAoBD,EAAEE,KAAKC,KAAKC,cAAcH,EAAEC,KAAKC,YAEhFtF,EAAUmD,aAAY,SAAC/C,GAAD,OAA4BA,EAAML,MAAMC,WAMpE,OALAwF,qBAAU,WACRvB,EP6BwC,CAAE3D,KAAMhB,MO3B/C,IAGD,uBAAM8E,UAAU,OAAhB,UACE,qBAAKA,UAAU,KAAf,SACE,qBAAKA,UAAU,YAAf,SACE,cAAC,IAAD,CAAMd,GAAI,CAAEC,SAAUlE,GAAe+E,UAAU,aAA/C,yBAKJ,qBAAKA,UAAU,YAAf,SACGpE,EACC,+CAEA,oCACGiF,QADH,IACGA,OADH,EACGA,EAAQQ,KAAI,WAA+BC,GAAe,IAAD,IAA1CC,EAA0C,EAA1CA,GAAIN,EAAsC,EAAtCA,KAAMO,EAAgC,EAAhCA,MACxB,OAAI,UAAAX,EAAOS,EAAI,UAAX,eAAeL,KAAKC,KAAKO,MAAM,EAAG,OAAlC,UAAyCZ,EAAOS,UAAhD,aAAyC,EAAWL,KAAKC,KAAKO,MAAM,EAAG,IAEvE,qBAAazB,UAAU,gBAAvB,UACE,8BAAIa,EAAOS,GAAGL,KAAKC,KAAKO,MAAM,EAAG,GAAjC,OACA,oBAAIzB,UAAU,aAAd,SACE,+BACGiB,EAAKC,KADR,IACeD,EAAKS,MADpB,YACoCF,SAJ/BD,GAWT,+BACGN,EAAKC,KADR,IACeD,EAAKS,MADpB,YACoCF,IAD3BD,cCpBZI,GAnBE,WACf,IAAM9B,EAAWC,cAKX9D,EAAa+C,aAAY,SAAA/C,GAAK,OAAIA,KACxC,OACE,gCACE,sCACCA,EAAMD,QAAQT,SACb,wBAAQsG,QAAS,WAPrB/B,EAASxD,MAOL,mCAEA,cAAC,IAAD,CAAM6C,GAAI,CAAEC,SAAUlE,GAAtB,oCCoCO4G,gBA3BS,SAAC7F,GAAD,MAAiB,CACvC6E,OAAQ7E,EAAML,MAAMA,MAAMkF,OAC1BvF,SAAUU,EAAMD,QAAQT,YAyBXuG,EAtBH,SAAC,GAA+D,EAA7DhB,OAA8D,IAErEhB,EAAWC,cAQjB,OANAsB,qBAAU,WR5BNtD,aAAagE,QAAQvF,IQ8BrBsD,EAASzD,OAEV,CAACyD,IAGF,mCACE,eAAC,IAAD,WACE,cAAC,GAAD,CAAcjB,UAAWgC,GAAMmB,KAAM9G,EAAa+G,OAAK,IACvD,cAAC,EAAD,CAAanD,YAAY,EAAOD,UAAW+C,GAAMI,KAAM9G,EAAa+G,OAAK,IACzE,cAAC,EAAD,CAAanD,YAAY,EAAMD,UAAWS,GAAQ0C,KAAM9G,EAAc+G,OAAK,IAC3E,cAAC,IAAD,CAAUD,KAAM9G,EAAoBiE,GAAI,CAAEC,SAAUlE,aCrC7CgH,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBjF,MAAK,YAAkD,IAA/CkF,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASzD,OACP,cAAC,IAAM0D,WAAP,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAUrE,MAAOA,EAAjB,SACE,cAAC,GAAD,UAINsE,SAASC,eAAe,SAM1BX,O","file":"static/js/main.4c5b9116.chunk.js","sourcesContent":["export const LOG_IN_REQUEST = 'LOG_IN_REQUEST';\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport const LOG_IN_FAILED = 'LOG_IN_FAILED';\n\nexport const LOG_OUT = 'LOG_OUT';\nexport const GET_PHONES = 'GET_PHONES';\n\nexport const ROUTES = {\n  main: '/',\n  home: '/home',\n  login: '/login',\n  projectName: '/phone_book', // webstorm adds it\n};\n\nexport const GET_USERS_REQUESTED = 'GET_USERS_REQUESTED';\nexport const GET_USERS_SUCCESS = 'GET_USERS_SUCCESS';\nexport const GET_USERS_FAILED = 'GET_USERS_FAILED';\n","import { combineReducers } from 'redux';\nimport {\n  LOG_IN_REQUEST,\n  LOG_IN_FAILED,\n  LOG_IN_SUCCESS,\n  LOG_OUT,\n  GET_USERS_REQUESTED,\n  GET_USERS_SUCCESS,\n  GET_USERS_FAILED,\n} from './constants';\nimport { IPerson } from '../containers/App';\nexport const initialStateLogUser = {\n  isLogged: false,\n  isLoading: false,\n  email: '',\n  error: null,\n};\n\nexport type LogUserArgsType = {\n  type: typeof LOG_IN_REQUEST | typeof LOG_IN_SUCCESS | typeof LOG_IN_FAILED | typeof LOG_OUT;\n  error: null | string;\n  message: string;\n};\n\ntype LogUserReturnType = {\n  isLogged?: boolean;\n  isLoading?: boolean;\n  email: string;\n  error?: null | string;\n};\n\nexport const logUser = (state = initialStateLogUser, action: LogUserArgsType): LogUserReturnType => {\n  switch (action.type) {\n    case LOG_IN_REQUEST:\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case LOG_IN_SUCCESS:\n      return {\n        ...state,\n        isLoading: false,\n        isLogged: true,\n      };\n    case LOG_IN_FAILED:\n      return {\n        ...state,\n        isLoading: false,\n        isLogged: false,\n        error: action.message,\n      };\n    case LOG_OUT:\n      return {\n        ...state,\n        isLogged: false,\n      };\n    default:\n      return state;\n  }\n};\n\nconst initialStateFetch = {\n  users: [],\n  loading: false,\n  error: null,\n};\n\nexport type UsersArgsType = {\n  type: typeof GET_USERS_SUCCESS | typeof GET_USERS_FAILED | typeof GET_USERS_REQUESTED;\n  users?: Array<IPerson>;\n  message?: string;\n};\n\ntype UsersReturnType = {\n  loading?: boolean;\n  users?: Array<IPerson>;\n  error?: string | null;\n};\n\nexport function users(state = initialStateFetch, action: UsersArgsType): UsersReturnType {\n  switch (action.type) {\n    case GET_USERS_REQUESTED:\n      return {\n        ...state,\n        loading: true,\n      };\n    case GET_USERS_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        users: action.users,\n      };\n    case GET_USERS_FAILED:\n      return {\n        ...state,\n        loading: false,\n        error: action.message,\n      };\n    default:\n      return state;\n  }\n}\n\nexport const rootReducer = combineReducers({\n  logUser,\n  users,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import {\n  LOG_IN_REQUEST,\n  LOG_IN_SUCCESS,\n  LOG_IN_FAILED,\n  LOG_OUT,\n  GET_USERS_REQUESTED,\n  GET_USERS_SUCCESS, GET_USERS_FAILED\n} from \"./constants\";\nimport { IPerson } from \"../containers/App\";\n\ntype LogInRequestType = {\n    type: typeof LOG_IN_REQUEST,\n}\ntype LogInSuccessType = {\n  type: typeof LOG_IN_SUCCESS,\n}\ntype LogInFailedType = {\n  type: typeof LOG_IN_FAILED,\n  message: boolean,\n}\ntype LogOutType = {\n    type: typeof LOG_OUT,\n}\n\ntype GetUsersType = {\n    type: typeof GET_USERS_REQUESTED,\n}\ntype GetUsersSuccessType = {\n  type: typeof GET_USERS_SUCCESS,\n  users: Array<IPerson>\n}\ntype GetUsersFailedType = {\n  type: typeof GET_USERS_FAILED,\n  message: string\n}\n\ntype ActionsType = LogInRequestType | LogInSuccessType| LogInFailedType| LogOutType | GetUsersType | GetUsersSuccessType | GetUsersFailedType ;\n\n\nexport const logInRequest = (email = ''): ActionsType => ({ type: LOG_IN_REQUEST }); //called in components, saga listens\nexport const logInSuccess = (): ActionsType => ({ type: LOG_IN_SUCCESS});\nexport const logInFailed = (e: any): ActionsType => ({ type: LOG_IN_FAILED, message: e.message });\nexport const logOut = (): ActionsType => ({ type: LOG_OUT });\n\nexport const getUsers = (): ActionsType => ({ type: GET_USERS_REQUESTED });\nexport const getUsersSuccess = (users: Array<IPerson>): ActionsType => ({ type: GET_USERS_SUCCESS, users: users })\nexport const getUsersFailed = (e: any): ActionsType => ({ type: GET_USERS_FAILED, message: e.message })","const TOKEN_KEY = 'current user';\n\nexport const loginToStorage = (/*/email: string*/): void => {\n  localStorage.setItem(TOKEN_KEY, /*email*/ 'some email');\n};\n\nexport const logoutOfStorage = (): void => {\n  localStorage.removeItem(TOKEN_KEY);\n};\n\nexport const isInStorage = (): boolean => {\n  if (localStorage.getItem(TOKEN_KEY)) {\n    return true;\n  }\n\n  return false;\n};\n","import { put, takeEvery, all, call, delay } from 'redux-saga/effects';\nimport {\n  GET_USERS_REQUESTED,\n  LOG_IN_REQUEST,\n  LOG_OUT,\n} from './constants';\nimport {logInSuccess, logInFailed, logOut, getUsersSuccess, getUsersFailed } from './actions';\nimport { loginToStorage, logoutOfStorage } from '../utils';\nimport {} from './constants';\nimport { IPerson } from '../containers/App';\n\ntype FetchUserParams = {\n  type: string;\n  users?: Array<IPerson>;\n  message?: string;\n};\n\nconst URL = 'http://localhost:3000/phones.json';\nconst getPhones = () => {\n  return fetch(URL, {\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n    },\n  })\n    .then(response => response.json())\n    .then(data => data)\n    .catch(e => {\n      console.log(e.toString());\n    });\n};\n\nfunction* fetchUsers(action: FetchUserParams): any {\n  //Since a generator function can technically return a dynamic value depending on how next() is called, Redux-Saga had decided it best to use type any rather than try to infer a type.\n  try {\n    yield delay(1000);\n    const users = yield call(getPhones);\n    yield put(getUsersSuccess(users)); //put === dispatch(action.type, payload)\n  } catch (e) {\n    yield put(getUsersFailed(e));\n  }\n}\n\nfunction* logInSaga(action: any): any {\n  try {\n    yield delay(1000);\n    loginToStorage();\n    yield put(logInSuccess());\n  } catch (e) {\n    yield put(logInFailed(e));\n  }\n}\nfunction* logOutSaga(action: any): any {\n  logoutOfStorage();\n  yield put(logOut());\n}\n\nfunction* handleLogInOut(): any {\n  //watcher\n  yield takeEvery(LOG_IN_REQUEST, logInSaga);\n  yield takeEvery(LOG_OUT, logOutSaga);\n}\n\nfunction* userSaga(): any {\n  //watcher\n  yield takeEvery(GET_USERS_REQUESTED, fetchUsers); //listens to action with action.type GET_USERS_REQUESTED,  and when it is called calls function  fetchUsers\n} //action is still being dispatched\n\nexport default function* rootSaga(): any {\n  yield all([\n    userSaga(), //fetch\n    handleLogInOut(),\n  ]);\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { rootReducer, LogUserArgsType, UsersArgsType, RootState } from \"./reducers\";\n\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from './sagas';\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(sagaMiddleware)));\n\nsagaMiddleware.run(rootSaga);\n\nexport const sagaAction = (type: any ) => store.dispatch({ type }); //saga\n\nexport default store;\n","import React, { useEffect } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { ROUTES } from '../redux/constants';\nimport { useSelector } from 'react-redux';\ntype PublicRouteProps = {\n  component: any;\n  restricted: any;\n  path: string;\n  exact: boolean;\n};\nconst PublicRoute = ({ component: Component, restricted, ...rest }: PublicRouteProps): React.ReactElement => {\n  const state: any = useSelector(state => state);\n  return (\n    <Route\n      {...rest}\n      render={props =>\n        state.logUser.isLogged && restricted ? <Redirect to={{ pathname: ROUTES.main }} /> : <Component {...props} />\n      }\n    />\n  );\n};\n\nexport default PublicRoute;\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { ROUTES } from '../redux/constants';\nimport { useSelector } from 'react-redux';\n\ntype PrivateRouteProps = {\n  component: any;\n  path: string;\n  exact: boolean;\n};\n\nconst PrivateRoute = ({ component: Component, ...rest }: PrivateRouteProps): React.ReactElement => {\n  const state: any = useSelector(state => state);\n\n  return (\n    <Route\n      {...rest}\n      render={props =>\n        state.logUser.isLogged ? <Component {...props} /> : <Redirect to={{ pathname: ROUTES.login }} />\n      }\n    />\n  );\n};\n\nexport default PrivateRoute;\n","import React, { FC} from 'react';\nimport { logInRequest } from '../redux/actions';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../redux/reducers';\nexport const SignIn: FC = (): React.ReactElement => {\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: { errors },\n  } = useForm();\n  const emailValue = watch('email');\n  const dispatch = useDispatch();\n  const isLoading = useSelector((state: RootState | any) => state.logUser.isLoading);\n  const handleLogin = () => {\n    dispatch(logInRequest(emailValue)); // saga watcher listens\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit(handleLogin)} className='form'>\n        {' '}\n        {/* your form submit function which will invoke after successful validation*/}\n        {/* register your input into the hook by invoking the \"register\" function */}\n        <input\n          {...register('email', {\n            //name=== errors obj property containing all validation errors for this specific field\n            validate: {\n              required: value => value.length || 'This field is required', //so validation need to return false to be passed\n              isCorrect: value => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) || 'Invalid email address',\n            },\n          })}\n          className='form__field'\n        />\n        {/* errors will return when field validation fails  */}\n        {errors.email && <span>{errors.email?.message}</span>}{' '}\n        {/*errors.email?.message - one entity for all possible messages*/}\n        {/* include validation with required or other standard HTML validation rules */}\n        <input\n          {...register('password', {\n            validate: {\n              required: value => value.length || 'This field is required',\n              length: value => value.length > 8 || 'Needs at least 8 symbols',\n              capital: value => value.search(/[A-Z]/) !== -1 || 'Must contain at least 1 capital letter',\n              small: value => value.search(/[a-z]/) !== -1 || 'Must contain at least 1 small letter',\n              digits: value => value.search(/[0-9]/) !== -1 || 'Must contain at least 1 digit',\n            },\n          })}\n          className='form__field'\n        />\n        {errors.password && <span>{errors.password?.message}</span>}\n        <input type='submit' className='form__button' />\n      </form>\n      {isLoading ? (\n        <div className='dialog'>\n          <div className='dialog__overlay'>\n            <div className='dialog__window'>\n              <p className='dialog__msg'>Getting access...</p>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <></>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, FC } from 'react';\nimport { IPerson } from '../containers/App';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUsers } from '../redux/actions';\nimport { ROUTES } from '../redux/constants';\nimport { RootState } from '../redux/reducers';\n\nconst Book: FC = (): React.ReactElement => {\n  const dispatch = useDispatch();\n  const phones = useSelector((state: RootState | any) =>\n    state.users.users.phones?.sort((a: any, b: any) => a.name.last.localeCompare(b.name.last))\n  );\n  const loading = useSelector((state: RootState | any) => state.users.loading);\n  useEffect(() => {\n    dispatch(getUsers());\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <main className='main'>\n      <div className='bg'>\n        <div className='container'>\n          <Link to={{ pathname: ROUTES.home }} className='main__link'>\n            Go home\n          </Link>\n        </div>\n      </div>\n      <div className='container'>\n        {loading ? (\n          <p>Wait for it...</p>\n        ) : (\n          <ul>\n            {phones?.map(({ id, name, phone }: IPerson, i: number) => {\n              if (phones[i - 1]?.name.last.slice(0, 1) !== phones[i]?.name.last.slice(0, 1)) {\n                return (\n                  <li key={id} className='withSeparator'>\n                    <p>{phones[i].name.last.slice(0, 1)} </p>\n                    <ul className='firstInRow'>\n                      <li>\n                        {name.last} {name.first}, phone: {phone}\n                      </li>\n                    </ul>\n                  </li>\n                );\n              } else {\n                return (\n                  <li key={id}>\n                    {name.last} {name.first}, phone: {phone}\n                  </li>\n                );\n              }\n            })}\n          </ul>\n        )}\n      </div>\n    </main>\n  );\n};\n\nexport default Book;\n","import React, {FC} from 'react';\n\nimport { Link } from 'react-router-dom';\n\nimport { logOut } from '../redux/actions';\nimport { ROUTES } from '../redux/constants';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst Home: FC = () => {\n  const dispatch = useDispatch();\n\n  const handleLogout = (): void => {\n    dispatch(logOut()); // saga watcher listens\n  };\n  const state: any = useSelector(state => state);\n  return (\n    <div>\n      <h1>Home</h1>\n      {state.logUser.isLogged ? (\n        <button onClick={() => handleLogout()}>Click here to log out</button>\n      ) : (\n        <Link to={{ pathname: ROUTES.login }}>Go to sign in page</Link>\n      )}\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport { Redirect, Switch } from 'react-router-dom';\nimport { connect, useDispatch, useSelector } from 'react-redux';\nimport PublicRoute from '../components/PublicRoute';\nimport PrivateRoute from '../components/PrivateRoute';\nimport { SignIn } from '../components/SignIn';\nimport { isInStorage } from '../utils';\nimport Book from '../components/Book';\nimport Home from './Home';\nimport { ROUTES } from '../redux/constants';\nimport { logInRequest } from '../redux/actions';\ninterface IName {\n  first: string;\n  last: string;\n}\n\nexport interface IPerson {\n  id: string;\n  isActive: boolean;\n  age?: number;\n  name: IName;\n  company?: string;\n  email?: string;\n  phone: string;\n  address?: string;\n  registered: string;\n}\n\n\nconst mapStateToProps = (state: any) => ({\n  phones: state.users.users.phones,\n  isLogged: state.logUser.isLogged,\n});\n\nconst App = ({ phones }: { phones: Array<IPerson> }): React.ReactElement => {\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (isInStorage()) {\n      dispatch(logInRequest()); // saga watcher listens\n    }\n  }, [dispatch]);\n\n  return (\n    <>\n      <Switch>\n        <PrivateRoute component={Book} path={ROUTES.main} exact />\n        <PublicRoute restricted={false} component={Home} path={ROUTES.home} exact />\n        <PublicRoute restricted={true} component={SignIn} path={ROUTES.login} exact />\n        <Redirect path={ROUTES.projectName} to={{ pathname: ROUTES.login }} />\n      </Switch>\n    </>\n  );\n};\n\nexport default connect(mapStateToProps)(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root') as HTMLElement\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}