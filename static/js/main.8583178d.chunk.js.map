{"version":3,"sources":["redux/constants.ts","redux/reducers/users.ts","redux/reducers/logUser.ts","redux/rootReducer.ts","redux/actions.ts","utils/index.ts","redux/sagas.ts","redux/store.ts","components/PublicRoute.tsx","components/PrivateRoute.tsx","components/SignIn.tsx","components/Book.tsx","components/Home.tsx","components/User.tsx","containers/App.tsx","reportWebVitals.ts","index.tsx"],"names":["LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILED","LOG_OUT","ROUTES","phone","personId","GET_USERS_REQUESTED","GET_USERS_SUCCESS","GET_USERS_FAILED","initialStateFetch","users","loading","error","initialStateLogUser","isLogged","isLoading","email","rootReducer","combineReducers","logUser","state","action","type","message","logInRequest","logOut","getUsersSuccess","TOKEN_KEY","fetchUsers","logInSaga","logOutSaga","handleLogInOut","userSaga","rootSaga","getPhones","fetch","headers","Accept","then","response","json","data","phones","catch","e","console","log","toString","delay","call","put","localStorage","setItem","removeItem","takeEvery","all","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","PublicRoute","Component","component","restricted","rest","useSelector","render","props","to","pathname","PrivateRoute","SignIn","useForm","register","handleSubmit","watch","errors","formState","emailValue","dispatch","useDispatch","onSubmit","className","validate","required","value","length","isCorrect","test","capital","search","small","digits","password","Book","sort","a","b","name","last","localeCompare","useEffect","map","i","id","slice","first","Home","onClick","User","useParams","person","useMemo","find","u","isActive","age","company","address","registered","App","getItem","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8583178d.chunk.js","sourcesContent":["export const LOG_IN_REQUEST = 'LOG_IN_REQUEST';\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport const LOG_IN_FAILED = 'LOG_IN_FAILED';\n\nexport const LOG_OUT = 'LOG_OUT';\nexport const GET_PHONES = 'GET_PHONES';\n\nexport const ROUTES = {\n  main: '/',\n  home: '/home',\n  login: '/login',\n  projectName: '/phone_book', // webstorm adds it\n  dynamic: {\n    phone: (personId = ':personId') => `/${personId}`,\n  }\n};\n\nexport const GET_USERS_REQUESTED = 'GET_USERS_REQUESTED';\nexport const GET_USERS_SUCCESS = 'GET_USERS_SUCCESS';\nexport const GET_USERS_FAILED = 'GET_USERS_FAILED';\n","import {Reducer} from 'redux'\nimport {\n  GET_USERS_REQUESTED,\n  GET_USERS_SUCCESS,\n  GET_USERS_FAILED,\n} from '../constants';\nimport { IPerson } from '../../containers/App';\nconst initialStateFetch: UsersReturnType = {\n  users: [],\n  loading: false,\n  error: null,\n};\n\nexport type UsersArgsType = {\n  type: typeof GET_USERS_SUCCESS | typeof GET_USERS_FAILED | typeof GET_USERS_REQUESTED;\n  users?: Array<IPerson>;\n  message?: string;\n};\n\ntype UsersReturnType = {\n  loading?: boolean;\n  users?: Array<IPerson>;\n  error?: string | null;\n};\n\nexport const  users: Reducer<typeof initialStateFetch, UsersArgsType> = (state = initialStateFetch, action: UsersArgsType) => {\n  switch (action.type) {\n    case GET_USERS_REQUESTED:\n      return {\n        ...state,\n        loading: true,\n      };\n    case GET_USERS_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        users: action.users,\n      };\n    case GET_USERS_FAILED:\n      return {\n        ...state,\n        loading: false,\n        error: action.message,\n      };\n    default:\n      return state;\n  }\n}","import {Reducer} from 'redux';\nimport {\n  LOG_IN_REQUEST,\n  LOG_IN_FAILED,\n  LOG_IN_SUCCESS,\n  LOG_OUT,\n} from '../constants';\nexport const initialStateLogUser: LogUserReturnType = {\n  isLogged: false,\n  isLoading: false,\n  email: '',\n  error: null,\n};\n\nexport type LogUserArgsType = {\n  type: typeof LOG_IN_REQUEST | typeof LOG_IN_SUCCESS | typeof LOG_IN_FAILED | typeof LOG_OUT;\n  error: null | string;\n  message: string;\n};\n\ntype LogUserReturnType = {\n  isLogged?: boolean;\n  isLoading?: boolean;\n  email: string;\n  error?: null | string;\n};\n\nexport const logUser: Reducer<typeof initialStateLogUser, LogUserArgsType> = (state = initialStateLogUser, action: LogUserArgsType) => {\n  switch (action.type) {\n    case LOG_IN_REQUEST:\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case LOG_IN_SUCCESS:\n      return {\n        ...state,\n        isLoading: false,\n        isLogged: true,\n      };\n    case LOG_IN_FAILED:\n      return {\n        ...state,\n        isLoading: false,\n        isLogged: false,\n        error: action.message,\n      };\n    case LOG_OUT:\n      return {\n        ...state,\n        isLogged: false,\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport {users} from \"./reducers/users\";\nimport {logUser} from \"./reducers/logUser\";\n\nexport const rootReducer = combineReducers({\n  logUser,\n  users,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import {\n  LOG_IN_REQUEST,\n  LOG_IN_SUCCESS,\n  LOG_IN_FAILED,\n  LOG_OUT,\n  GET_USERS_REQUESTED,\n  GET_USERS_SUCCESS, GET_USERS_FAILED\n} from \"./constants\";\nimport { IPerson } from \"../containers/App\";\n\ntype LogInRequestType = {\n    type: typeof LOG_IN_REQUEST,\n}\ntype LogInSuccessType = {\n  type: typeof LOG_IN_SUCCESS,\n}\ntype LogInFailedType = {\n  type: typeof LOG_IN_FAILED,\n  message: boolean,\n}\ntype LogOutType = {\n    type: typeof LOG_OUT,\n}\n\ntype GetUsersType = {\n    type: typeof GET_USERS_REQUESTED,\n}\ntype GetUsersSuccessType = {\n  type: typeof GET_USERS_SUCCESS,\n  users: Array<IPerson>\n}\ntype GetUsersFailedType = {\n  type: typeof GET_USERS_FAILED,\n  message: string\n}\n\ntype ActionsType = LogInRequestType | LogInSuccessType| LogInFailedType| LogOutType | GetUsersType | GetUsersSuccessType | GetUsersFailedType ;\n\n\nexport const logInRequest = (email = ''): ActionsType => ({ type: LOG_IN_REQUEST }); //called in components, saga listens\nexport const logInSuccess = (): ActionsType => ({ type: LOG_IN_SUCCESS});\nexport const logInFailed = (e: any): ActionsType => ({ type: LOG_IN_FAILED, message: e.message });\nexport const logOut = (): ActionsType => ({ type: LOG_OUT });\n\nexport const getUsers = (): ActionsType => ({ type: GET_USERS_REQUESTED });\nexport const getUsersSuccess = (users: Array<IPerson>): ActionsType => ({ type: GET_USERS_SUCCESS, users: users })\nexport const getUsersFailed = (e: any): ActionsType => ({ type: GET_USERS_FAILED, message: e.message })","const TOKEN_KEY = 'current user';\n\nexport const loginToStorage = (/*/email: string*/): void => {\n  localStorage.setItem(TOKEN_KEY, /*email*/ 'some email');\n};\n\nexport const logoutOfStorage = (): void => {\n  localStorage.removeItem(TOKEN_KEY);\n};\n\nexport const isInStorage = (): boolean => {\n  if (localStorage.getItem(TOKEN_KEY)) {\n    return true;\n  }\n\n  return false;\n};\n","import { put, takeEvery, all, call, delay } from 'redux-saga/effects';\nimport {\n  GET_USERS_REQUESTED,\n  LOG_IN_REQUEST,\n  LOG_OUT,\n} from './constants';\nimport {logInSuccess, logInFailed, logOut, getUsersSuccess, getUsersFailed } from './actions';\nimport { loginToStorage, logoutOfStorage } from '../utils';\nimport {} from './constants';\nimport { IPerson } from '../containers/App';\n\ntype FetchUserParams = {\n  type: string;\n  users?: Array<IPerson>;\n  message?: string;\n};\n\nconst URL = 'http://localhost:3000/phones.json';\nconst getPhones = () => {\n  return fetch(URL, {\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n    },\n  })\n    .then(response => response.json())\n    .then(data => data.phones)\n    .catch(e => {\n      console.log(e.toString());\n    });\n};\n\nfunction* fetchUsers(action: FetchUserParams): any {\n  //Since a generator function can technically return a dynamic value depending on how next() is called, Redux-Saga had decided it best to use type any rather than try to infer a type.\n  try {\n    yield delay(1000);\n    const users = yield call(getPhones);\n    yield put(getUsersSuccess(users)); //put === dispatch(action.type, payload)\n  } catch (e) {\n    yield put(getUsersFailed(e));\n  }\n}\n\nfunction* logInSaga(action: any): any {\n  try {\n    yield delay(1000);\n    loginToStorage();\n    yield put(logInSuccess());\n  } catch (e) {\n    yield put(logInFailed(e));\n  }\n}\nfunction* logOutSaga(action: any): any {\n  logoutOfStorage();\n  yield put(logOut());\n}\n\nfunction* handleLogInOut(): any {\n  //watcher\n  yield takeEvery(LOG_IN_REQUEST, logInSaga);\n  yield takeEvery(LOG_OUT, logOutSaga);\n}\n\nfunction* userSaga(): any {\n  //watcher\n  yield takeEvery(GET_USERS_REQUESTED, fetchUsers); //listens to action with action.type GET_USERS_REQUESTED,  and when it is called calls function  fetchUsers\n} //action is still being dispatched\n\nexport default function* rootSaga(): any {\n  yield all([\n    userSaga(), //fetch\n    handleLogInOut(),\n  ]);\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport {  LogUserArgsType } from './reducers/logUser';\nimport {  UsersArgsType  } from './reducers/users';\nimport {rootReducer, RootState} from './rootReducer'\n\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from './sagas';\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(sagaMiddleware)));\n\nsagaMiddleware.run(rootSaga);\n\nexport const sagaAction = (type: any ) => store.dispatch({ type }); //saga\n\nexport default store;\n","import React, { useEffect } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { ROUTES } from '../redux/constants';\nimport { useSelector } from 'react-redux';\ntype PublicRouteProps = {\n  component: any;\n  restricted: any;\n  path: string;\n  exact: boolean;\n};\nconst PublicRoute = ({ component: Component, restricted, ...rest }: PublicRouteProps): React.ReactElement => {\n  const state: any = useSelector(state => state);\n  return (\n    <Route\n      {...rest}\n      render={props =>\n        state.logUser.isLogged && restricted ? <Redirect to={{ pathname: ROUTES.main }} /> : <Component {...props} />\n      }\n    />\n  );\n};\n\nexport default PublicRoute;\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { ROUTES } from '../redux/constants';\nimport { useSelector } from 'react-redux';\n\ntype PrivateRouteProps = {\n  component: any;\n  path: string;\n  exact: boolean;\n};\n\nconst PrivateRoute = ({ component: Component, ...rest }: PrivateRouteProps): React.ReactElement => {\n  const state: any = useSelector(state => state);\n\n  return (\n    <Route\n      {...rest}\n      render={props =>\n        state.logUser.isLogged ? <Component {...props} /> : <Redirect to={{ pathname: ROUTES.login }} />\n      }\n    />\n  );\n};\n\nexport default PrivateRoute;\n","import React, { FC} from 'react';\nimport { logInRequest } from '../redux/actions';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../redux/rootReducer';\nexport const SignIn: FC = (): React.ReactElement => {\n  const {\n    register,\n    handleSubmit,\n    watch,\n    formState: { errors },\n  } = useForm();\n  const emailValue = watch('email');\n  const dispatch = useDispatch();\n  const isLoading = useSelector((state: RootState | any) => state.logUser.isLoading);\n  const handleLogin = () => {\n    dispatch(logInRequest(emailValue)); // saga watcher listens\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit(handleLogin)} className='form'>\n        {' '}\n        {/* your form submit function which will invoke after successful validation*/}\n        {/* register your input into the hook by invoking the \"register\" function */}\n        <input\n          {...register('email', {\n            //name=== errors obj property containing all validation errors for this specific field\n            validate: {\n              required: value => value.length || 'This field is required', //so validation need to return false to be passed\n              isCorrect: value => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) || 'Invalid email address',\n            },\n          })}\n          className='form__field'\n        />\n        {/* errors will return when field validation fails  */}\n        {errors.email && <span>{errors.email?.message}</span>}{' '}\n        {/*errors.email?.message - one entity for all possible messages*/}\n        {/* include validation with required or other standard HTML validation rules */}\n        <input\n          {...register('password', {\n            validate: {\n              required: value => value.length || 'This field is required',\n              length: value => value.length > 8 || 'Needs at least 8 symbols',\n              capital: value => value.search(/[A-Z]/) !== -1 || 'Must contain at least 1 capital letter',\n              small: value => value.search(/[a-z]/) !== -1 || 'Must contain at least 1 small letter',\n              digits: value => value.search(/[0-9]/) !== -1 || 'Must contain at least 1 digit',\n            },\n          })}\n          className='form__field'\n        />\n        {errors.password && <span>{errors.password?.message}</span>}\n        <input type='submit' className='form__button' />\n      </form>\n      {isLoading ? (\n        <div className='dialog'>\n          <div className='dialog__overlay'>\n            <div className='dialog__window'>\n              <p className='dialog__msg'>Getting access...</p>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <></>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, FC } from 'react';\nimport { IPerson } from '../containers/App';\nimport { Link, Route, useParams, useLocation } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUsers } from '../redux/actions';\nimport { ROUTES } from '../redux/constants';\nimport { RootState } from '../redux/rootReducer';\nimport User from './User';\n\nconst Book: FC = (): React.ReactElement => {\n  const dispatch = useDispatch();\n  const phones = useSelector((state: RootState | any) =>\n    state.users.users?.sort((a: any, b: any) => a.name.last.localeCompare(b.name.last))\n  );\n  const loading = useSelector((state: RootState | any) => state.users.loading);\n  useEffect(() => {\n    dispatch(getUsers());\n    // eslint-disable-next-line\n  }, []);\n\n\n  return (\n    <main className='main'>\n      <div className='bg'>\n        <div className='container'>\n          <Link to={{ pathname: ROUTES.home }} className='main__link'>\n            Go home\n          </Link>\n        </div>\n      </div>\n      <div className='container'>\n        {loading ? (\n          <p>Wait for it...</p>\n        ) : (\n          <ul>\n            {phones?.map(({ id, name, phone }: IPerson, i: number) => {\n              if (phones[i - 1]?.name.last.slice(0, 1) !== phones[i]?.name.last.slice(0, 1)) {\n                return (\n                  <li key={id} className='withSeparator'>\n                    <p>{phones[i].name.last.slice(0, 1)} </p>\n                    <ul className='firstInRow'>\n                      <li>\n\n                        <Link /*Route*/ to={`/${id}`}/* component={User}*/>\n                          {name.last} {name.first}\n                        </Link>\n                      </li>\n                    </ul>\n                  </li>\n                );\n              } else {\n                return (\n                  <li key={id}>\n                    <Link /*Route*/ to={`/${id}`} /*component={User}*/>\n                    {name.last} {name.first}\n                    </Link>\n                  </li>\n                );\n              }\n            })}\n          </ul>\n        )}\n      </div>\n    </main>\n  );\n};\n\nexport default Book;\n","import React, {FC} from 'react';\n\nimport { Link } from 'react-router-dom';\n\nimport { logOut } from '../redux/actions';\nimport { ROUTES } from '../redux/constants';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst Home: FC = () => {\n  const dispatch = useDispatch();\n\n  const handleLogout = (): void => {\n    dispatch(logOut()); // saga watcher listens\n  };\n  const state: any = useSelector(state => state);\n  return (\n    <div>\n      <h1>Home</h1>\n      {state.logUser.isLogged ? (\n        <button onClick={() => handleLogout()}>Click here to log out</button>\n      ) : (\n        <Link to={{ pathname: ROUTES.login }}>Go to sign in page</Link>\n      )}\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { FC, useEffect, useMemo } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../redux/rootReducer\";\nimport { useParams } from \"react-router-dom\";\n\nconst User: FC = () => {\n  const { personId } = useParams<{personId: string}>();\n  const users = useSelector((state: RootState)=> state.users.users);\n  const person = useMemo(() => users?.find(u => u.id === personId), [users, personId]);\n\n  return person\n    ? (\n    <>\n      <div className=\"container\">\n\n        <div className=\"person\">\n          <h1>{person.name.first} {person.name.last}</h1>\n          <p>\n            <span className=\"person__info-title\">id:  </span>\n            <span className=\"person__info-description\">{person.id}</span>\n          </p>\n          <p>\n            <span className=\"person__info-title\">Status:  </span>\n            <span className=\"person__info-description\">{person.isActive? `active` : `not active`}</span>\n          </p>\n          <p>\n            <span className=\"person__info-title\">Age:  </span>\n            <span className=\"person__info-description\">{person.age}</span>\n          </p>\n          <p>\n            <span className=\"person__info-title\">Company:  </span>\n            <span className=\"person__info-description\">{person.company}</span>\n          </p>\n          <p>\n            <span className=\"person__info-title\">Email:  </span>\n            <span className=\"person__info-description\">{person.email}</span>\n          </p>\n          <p>\n            <span className=\"person__info-title\">Phone:  </span>\n            <span className=\"person__info-description\">{person.phone}</span>\n          </p>\n          <p>\n            <span className=\"person__info-title\">Address: </span>\n            <span className=\"person__info-description\">{person.address}</span>\n          </p>\n          <p>\n            <span className=\"person__info-title\">Registered:  </span>\n            <span className=\"person__info-description\">{person.registered}</span>\n          </p>\n        </div>\n      </div>\n    </>\n  )\n    : null\n};\n\nexport default User;","import React, { useEffect } from 'react';\nimport './App.css';\nimport { Redirect, Switch, Route, useLocation } from \"react-router-dom\";\nimport { connect, useDispatch, useSelector } from 'react-redux';\nimport PublicRoute from '../components/PublicRoute';\nimport PrivateRoute from '../components/PrivateRoute';\nimport { SignIn } from '../components/SignIn';\nimport { isInStorage } from '../utils';\nimport Book from '../components/Book';\nimport Home from '../components/Home';\nimport User from \"../components/User\";\nimport { ROUTES } from '../redux/constants';\nimport { logInRequest } from '../redux/actions';\nimport { RootState } from \"../redux/rootReducer\";\ninterface IName {\n  first: string;\n  last: string;\n}\n\nexport interface IPerson {\n  id: string;\n  isActive: boolean;\n  age?: number;\n  name: IName;\n  company?: string;\n  email?: string;\n  phone: string;\n  address?: string;\n  registered: string;\n}\n\nconst App = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (isInStorage()) {\n      dispatch(logInRequest()); // saga watcher listens\n    }\n  }, [dispatch]);\n\n  return (\n    <>\n      <Switch>\n        <PrivateRoute component={Book} path={ROUTES.main} exact />\n        <PublicRoute restricted={false} component={Home} path={ROUTES.home} exact />\n        <PublicRoute restricted={true} component={SignIn} path={ROUTES.login} exact />\n        <PrivateRoute component={User} path={ROUTES.dynamic.phone()} exact />\n      </Switch>\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root') as HTMLElement\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}