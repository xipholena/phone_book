{"version":3,"sources":["constants.js","reducers.js","store.js","utils/index.ts","components/PublicRoute.tsx","components/PrivateRoute.tsx","components/SignIn.tsx","actions.js","components/Book.tsx","containers/Home.tsx","containers/App.tsx","reportWebVitals.ts","index.tsx"],"names":["LOG_IN","LOG_OUT","GET_PHONES","initialStateLogUser","isLogged","initialStatePhones","phones","rootReducer","combineReducers","logUser","state","action","type","setPhones","payload","store","createStore","composeWithDevTools","applyMiddleware","logger","TOKEN_KEY","isInStorage","localStorage","getItem","PublicRoute","Component","component","restricted","rest","render","props","to","PrivateRoute","getState","reduxForm","form","history","reset","useForm","register","handleSubmit","watch","errors","formState","emailValue","console","log","email","message","onSubmit","nowLogged","dispatch","setItem","push","className","validate","required","value","length","isCorrect","test","capital","search","small","digits","password","Book","useEffect","map","i","id","name","phone","last","slice","first","Home","handleLogout","removeItem","onClick","connect","path","exact","SignIn","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.deb1e1ae.chunk.js","sourcesContent":["export const LOG_IN = 'LOG_IN';\nexport const LOG_OUT = 'LOG_OUT';\nexport const GET_PHONES = 'GET_PHONES';\n","import { combineReducers } from 'redux';\nimport { LOG_IN, LOG_OUT, GET_PHONES } from './constants';\n\nexport const initialStateLogUser = {\n  isLogged: false,\n};\n\nexport const logUser = (state = initialStateLogUser, action) => {\n  switch (action.type) {\n    case LOG_IN:\n      return {\n        ...state,\n        isLogged: true,\n      };\n    case LOG_OUT:\n      return {\n        ...state,\n        isLogged: false,\n      };\n    default:\n      return state;\n  }\n};\nexport const initialStatePhones = {\n  phones: [],\n};\nexport const setPhones = (state = initialStatePhones, action) => {\n  switch (action.type) {\n    case GET_PHONES:\n      return {\n        ...state,\n        phones: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const rootReducer = combineReducers({\n  logUser,\n  setPhones\n});\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport {logger} from \"redux-logger/src\";\nimport { rootReducer} from './reducers';\n\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(logger)));\n\nconst action = type => store.dispatch({type});\n\nexport default store;\n","const TOKEN_KEY = 'current user';\n\nexport const loginToStorage = (email: string): void => {\n  localStorage.setItem(TOKEN_KEY, email);\n};\n\nexport const logoutOfStorage = (): void => {\n  localStorage.removeItem(TOKEN_KEY);\n};\n\nexport const isInStorage = (): boolean => {\n  if (localStorage.getItem(TOKEN_KEY)) {\n    return true;\n  }\n\n  return false;\n};\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { isInStorage } from '../utils';\n\ntype PublicRouteProps = {\n  component: any;\n  restricted: any;\n  path: string;\n  exact: boolean;\n};\nconst PublicRoute = ({ component: Component, restricted, ...rest }: PublicRouteProps): React.ReactElement => {\n  return (\n    <Route\n      {...rest}\n      render={props => (isInStorage() && restricted ? <Redirect to='/' /> : <Component {...props} />)}\n    />\n  );\n};\n\nexport default PublicRoute;\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { IPerson } from '../containers/App';\nimport store from \"../store\";\n\ntype PrivateRouteProps = {\n  component: any;\n  phones: Array<IPerson>;\n  /*getPhonesHandler: any;*/\n  path: string;\n  exact: boolean;\n};\nconst PrivateRoute = ({\n  component: Component,\n  phones,\n  /*getPhonesHandler,*/\n  ...rest\n}: PrivateRouteProps): React.ReactElement => {\n    const state: any = store.getState();\n  return (\n    <Route\n      {...rest}\n      render={props =>\n          state.logUser.isLogged ? (\n          <Component phones={phones} /*getPhonesHandler={getPhonesHandler}*/ {...props} />\n        ) : (\n          <Redirect to='/login' />\n        )\n      }\n    />\n  );\n};\n\nexport default PrivateRoute;\n\n","import React, {FC} from 'react'\nimport { Field, reduxForm/*, formValueSelector */} from 'redux-form'\nimport store from \"../store\";\n//import {LOG_IN} from \"../constants\";\nimport {logIn} from \"../actions\";\nimport {loginToStorage} from \"../utils\";\nimport {useForm} from \"react-hook-form\";\n\n\nlet SignIn:FC = (props: any) => {\n    const { history, reset} = props;\n    const { register, handleSubmit, watch, formState: { errors } } = useForm();\n    const state = store.getState()\n    const emailValue = watch(\"email\");\n    //was props: RouteComponentProps\n    const handleLogin = () => {\n       //props.dispatch({ type: LOG_IN })\n       //store.dispatch({ type: LOG_IN })\n        logIn(true);\n        loginToStorage(emailValue);\n        history.push('/');\n    }\n    console.log(watch(\"email\")); // you can watch individual input by pass the name of the input\n    console.log('errors.email', errors.email)\n    console.log('errors.email.message', errors.email?.message)\n\n    return (\n        <form onSubmit={handleSubmit(handleLogin)} className=\"form\"> {/* your form submit function which will invoke after successful validation*/}\n            {/* register your input into the hook by invoking the \"register\" function */}\n            <input\n                {...register(\"email\", { //name=== errors obj property containing all validation errors for this specific field\n                    validate: {\n                        required: value => value.length || 'This field is required', //so validation need to return false to be passed\n                        isCorrect: value => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) || 'Invalid email address'\n                    }\n                })}\n                className=\"form__field\"\n            />\n            {/* errors will return when field validation fails  */}\n            {errors.email && <span>{errors.email?.message}</span>} {/*errors.email?.message - one entity for all possible messages*/}\n            {/* include validation with required or other standard HTML validation rules */}\n            <input\n                {...register(\"password\", {\n                    validate: {\n                        required: value => value.length || 'This field is required',\n                        length: value => value.length > 8 || 'Needs at least 8 symbols',\n                        capital: value => value.search(/[A-Z]/) !== -1 || 'Must contain at least 1 capital letter',\n                        small: value => value.search(/[a-z]/) !== -1 || 'Must contain at least 1 small letter',\n                        digits: value => value.search(/[0-9]/) !== -1 || 'Must contain at least 1 digit',\n                    }\n                })}\n                className=\"form__field\"/>\n            {errors.password && <span>{errors.password?.message}</span>}\n            <input type=\"submit\" className=\"form__button\"/>\n        </form>\n    )\n}\n\nexport default reduxForm({\n    form: 'fieldLevelValidation', // a unique identifier for this form\n})(SignIn)\n\n\n","import { LOG_IN, LOG_OUT, GET_PHONES } from './constants';\n//import { IPerson } from './containers/App';\nimport store from \"./store\";\n\nexport const logIn = (nowLogged) =>  {\n  store.dispatch({ type: LOG_IN, payload: nowLogged });\n};\n\nexport const logOut = () => {\n  store.dispatch({type: LOG_OUT});\n};\n\nexport const getPhones = () => dispatch => {\n  async function getPhonesHandler() {\n    return fetch('http://localhost:3000/phones.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    })\n      .then(response => response.json())\n      .then(data =>\n        dispatch({\n          type: GET_PHONES,\n          payload: data.phones.sort((a, b) => a.name.last.localeCompare(b.name.last)),\n        })\n      )\n      .catch(e => {\n        console.log(e.toString());\n      });\n  }\n};\n","import React, { useEffect } from 'react';\nimport { IPerson } from '../containers/App';\nimport { Link } from 'react-router-dom';\n\ninterface BookProps {\n  phones: Array<IPerson>;\n  //getPhonesHandler: () => void;\n}\n\nconst Book = ({ phones /*getPhonesHandler */ }: BookProps): React.ReactElement => {\n  useEffect(() => {\n    //getPhonesHandler();\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <main className='main'>\n      <div className='container'>\n        <ul>\n          {phones?.map(({ id, name, phone }: IPerson, i) => {\n            if (phones[i - 1]?.name.last.slice(0, 1) !== phones[i]?.name.last.slice(0, 1)) {\n              return (\n                <li key={id} className='withSeparator'>\n                  <p>{phones[i].name.last.slice(0, 1)} </p>\n                  <ul className='firstInRow'>\n                    <li>\n                      {name.last} {name.first}, phone: {phone}\n                    </li>\n                  </ul>\n                </li>\n              );\n            } else {\n              return (\n                <li key={id}>\n                  {name.last} {name.first}, phone: {phone}\n                </li>\n              );\n            }\n          })}\n        </ul>\n        <Link to='/home'>Go home</Link>\n      </div>\n    </main>\n  );\n};\n\nexport default Book;\n","import React, { Component } from 'react';\nimport { logoutOfStorage,  isInStorage } from '../utils';\nimport { Link} from 'react-router-dom';\nimport store from \"../store\";\n//import {LOG_OUT} from \"../constants\";\nimport {logOut} from \"../actions\";\n\n// RouteComponentProps<MatchParams>\nconst Home = () =>  {\n  const handleLogout = (): void => {\n    logoutOfStorage();\n    logOut();\n    //store.dispatch({type: LOG_OUT})\n    //props.dispatch({type: LOG_OUT})\n  };\n  const state = store.getState()\n  return (\n      <div>\n        <h1>Home</h1>\n        {state.logUser.isLogged || isInStorage()  ? (\n            <button onClick={() => handleLogout()}>Click here to log out</button>\n        ) : (\n            <Link to='/login'>Go to sign in page</Link>\n        )}\n      </div>\n  );\n\n}\n\nexport default Home;\n","import React, {useEffect } from 'react';\nimport './App.css';\nimport { Redirect, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport PublicRoute from '../components/PublicRoute';\nimport PrivateRoute from '../components/PrivateRoute';\nimport SignIn from '../components/SignIn';\nimport Book from '../components/Book';\nimport Home from './Home';\nimport store from \"../store\";\n\ninterface IName {\n  first: string;\n  last: string;\n}\n\nexport interface IPerson {\n  id: string;\n  isActive: boolean;\n  age?: number;\n  name: IName;\n  company?: string;\n  email?: string;\n  phone: string;\n  address?: string;\n  registered: string;\n}\nconst mapStateToProps = (state: any) => ({\n    phones: state.setPhones.phones,\n    isLogged: state.logUser.isLogged,\n    form: state.form\n});\n\n\nconst App = ({ phones }: { phones: Array<IPerson> }): React.ReactElement => {\n  return (\n      <>\n        <Switch>\n          <PublicRoute restricted={false} component={Home} path='/home' exact />\n          <PublicRoute restricted={true} component={SignIn} path='/login' exact />\n          <PrivateRoute component={Book} path='/' exact phones={phones} />\n          <Redirect path='/phone_book' to='/login' />\n        </Switch>\n      </>\n\n  );\n};\n\n/*getPhonesHandler = {onSetPhones}*/\nexport default connect(mapStateToProps)(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root') as HTMLElement\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}