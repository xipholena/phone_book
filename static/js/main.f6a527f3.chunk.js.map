{"version":3,"sources":["utils/index.js","components/PublicRoute.js","components/PrivateRoute.js","components/SignIn.js","components/Dashboard.js","components/Home.js","containers/App.tsx","reportWebVitals.ts","index.tsx"],"names":["TOKEN_KEY","isLogin","localStorage","getItem","PublicRoute","Component","component","restricted","rest","render","props","to","PrivateRoute","SignIn","handleLogin","setItem","history","push","onClick","Dashboard","Home","handleLogout","removeItem","setState","state","this","App","useState","setPhones","useHistory","a","fetch","headers","then","response","json","data","phones","catch","e","console","log","toString","useEffect","getPhonesHandler","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"6QAAMA,EAAY,MAULC,EAAU,WACnB,QAAIC,aAAaC,QAAQH,I,OCGdI,EAVK,SAAC,GAAiD,IAArCC,EAAoC,EAA/CC,UAAsBC,EAAyB,EAAzBA,WAAeC,EAAU,0CACjE,OACI,cAAC,IAAD,2BAAWA,GAAX,IAAiBC,OAAQ,SAAAC,GAAK,OAC1BT,KAAaM,EACT,cAAC,IAAD,CAAUI,GAAG,eACX,cAACN,EAAD,eAAeK,SCQlBE,EAbM,SAAC,GAAqC,IAAzBP,EAAwB,EAAnCC,UAAyBE,EAAU,6BACtD,OAII,aAFA,CAEC,IAAD,2BAAWA,GAAX,IAAiBC,OAAQ,SAAAC,GAAK,OAC1BT,IACI,cAACI,EAAD,eAAeK,IACb,cAAC,IAAD,CAAUC,GAAG,iBCMhBE,EAfA,SAACH,GAEZ,IAAMI,EAAc,WHFpBZ,aAAaa,QAAQf,EAAW,aGI5BU,EAAMM,QAAQC,KAAK,eAGvB,OACI,gCACI,yCACA,wBAAQC,QAAS,kBAAMJ,KAAvB,sCCHGK,EARG,WACd,OACI,6C,gCC+BOC,E,kDA7BX,WAAYV,GAAQ,IAAD,8BACf,cAAMA,IAOVW,aAAe,WLPfnB,aAAaoB,WAAWtB,GKSpB,EAAKuB,SAAS,CACVtB,SAAS,KARb,EAAKuB,MAAQ,CACTvB,QAASA,KAJE,E,0CAenB,WAAU,IAAD,OACL,OACI,gCACI,sCAECwB,KAAKD,MAAMvB,QACR,wBAAQiB,QAAS,kBAAM,EAAKG,gBAA5B,mCACE,cAAC,IAAD,CAAMV,GAAG,UAAT,uC,GAxBHN,aCgEJqB,EAvCC,WACZ,MAA4BC,mBAAyB,IAArD,mBAAeC,GAAf,WACA,EAAoCD,oBAAS,GAA7C,6BACgBE,cAHsB,4CAKvC,sBAAAC,EAAA,+EACWC,MAAM,oCAAqC,CAC9CC,QAAS,CACL,eAAgB,mBAChB,OAAU,sBAGbC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAUR,EAAUQ,EAAKC,WAC9BC,OAAM,SAACC,GACJC,QAAQC,IAAIF,EAAEG,gBAV1B,4CALuC,sBAuBtC,OALAC,qBAAU,YAlB4B,mCAmBlCC,KACD,IAIC,eAAC,IAAD,WACI,cAAC,EAAD,CAAarC,YAAY,EAAOD,UAAWc,EAAMyB,KAAK,IAAIC,OAAK,IAC/D,cAAC,EAAD,CAAavC,YAAY,EAAMD,UAAWO,EAAQgC,KAAK,UAAUC,OAAK,IACtE,cAAC,EAAD,CAAcxC,UAAWa,EAAW0B,KAAK,aAAaC,OAAK,QC1CxDC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAAS9C,OACP,cAAC,IAAM+C,WAAP,UACI,cAAC,IAAD,UACI,cAAC,EAAD,QAGRC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.f6a527f3.chunk.js","sourcesContent":["const TOKEN_KEY = 'jwt';\n\nexport const login = () => {\n    localStorage.setItem(TOKEN_KEY, 'TestLogin');\n}\n\nexport const logout = () => {\n    localStorage.removeItem(TOKEN_KEY);\n}\n\nexport const isLogin = () => {\n    if (localStorage.getItem(TOKEN_KEY)) {\n        return true;\n    }\n\n    return false;\n}","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { isLogin } from '../utils';\n\nconst PublicRoute = ({component: Component, restricted, ...rest}) => {\n    return (\n        <Route {...rest} render={props => (\n            isLogin() && restricted ?\n                <Redirect to=\"/dashboard\" />\n                : <Component {...props} />\n        )} />\n    );\n};\n\nexport default PublicRoute;","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { isLogin } from '../utils';\n\nconst PrivateRoute = ({component: Component, ...rest}) => {\n    return (\n\n        // Show the component only when the user is logged in\n        // Otherwise, redirect the user to /signin page\n        <Route {...rest} render={props => (\n            isLogin() ?\n                <Component {...props} />\n                : <Redirect to=\"/signin\" />\n        )} />\n    );\n};\n\nexport default PrivateRoute;","import React from 'react';\nimport { login } from '../utils';\n\nconst SignIn = (props) => {\n\n    const handleLogin = () => {\n        login();\n        props.history.push('/dashboard');\n    }\n\n    return (\n        <div>\n            <h1>Sign in</h1>\n            <button onClick={() => handleLogin()}>Click here to log in</button>\n        </div>\n    );\n};\n\nexport default SignIn;","import React from 'react';\n\nconst Dashboard = () => {\n    return (\n        <div>\n            Dashboard\n        </div>\n    );\n};\n\nexport default Dashboard;\n","import React, { Component } from 'react';\nimport { logout, isLogin } from '../utils';\nimport { Link } from 'react-router-dom';\n\nclass Home extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isLogin: isLogin()\n        }\n    }\n\n    handleLogout = () => {\n        logout();\n        this.setState({\n            isLogin: false\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Home</h1>\n\n                {this.state.isLogin ?\n                    <button onClick={() => this.handleLogout()}>Click here to log out</button>\n                    : <Link to=\"/signin\">Go to sign in page</Link>\n                }\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React, {useState, useEffect, FC} from 'react';\nimport './App.css';\nimport {useHistory, Switch, Redirect, Route} from 'react-router-dom';\n\nimport Header from '../components/Header';\nimport Book from '../components/Book';\nimport LogInPage from \"../components/LogInPage\";\nimport PublicRoute from \"../components/PublicRoute\";\nimport PrivateRoute from \"../components/PrivateRoute\";\nimport SignIn from \"../components/SignIn\";\nimport Dashboard from \"../components/Dashboard\";\nimport Home from \"../components/Home\";\ninterface IName {\n    first: string,\n    last: string\n}\n\nexport interface IPerson {\n    id: string,\n    isActive: boolean,\n    age?: number,\n    name: IName,\n    company?: string,\n    email?: string,\n    phone: string,\n    address?: string,\n    registered: string\n}\n\nconst App: FC = (): React.ReactElement => {\n    const [phones, setPhones] = useState<Array<IPerson>>([]);\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\n    const history = useHistory();\n\n   async function getPhonesHandler(){\n       return fetch('http://localhost:3000/phones.json', {\n           headers: {\n               'Content-Type': 'application/json',\n               'Accept': 'application/json',\n           }\n       })\n           .then((response) => response.json())\n           .then((data) => setPhones(data.phones))\n           .catch((e) => {\n               console.log(e.toString())\n           })\n   }\n    useEffect(() => {\n        getPhonesHandler();\n    }, [])\n\n\n    return (\n        <Switch>\n            <PublicRoute restricted={false} component={Home} path=\"/\" exact />\n            <PublicRoute restricted={true} component={SignIn} path=\"/signin\" exact />\n            <PrivateRoute component={Dashboard} path=\"/dashboard\" exact />\n            {/*  <div>\n        <Header/>\n        <LogInPage/>\n        <Book phones={phones}/>\n         </div>*/}\n        </Switch>\n\n    );\n\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n      <BrowserRouter>\n          <App />\n      </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root') as HTMLElement\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}