{"version":3,"sources":["constants.ts","reducers.ts","actions.ts","utils/index.ts","sagas.ts","store.js","components/PublicRoute.tsx","components/PrivateRoute.tsx","components/SignIn.tsx","components/Book.tsx","containers/Home.tsx","containers/App.tsx","reportWebVitals.ts","index.tsx"],"names":["LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILED","LOG_OUT","ROUTES","GET_USERS_REQUESTED","GET_USERS_SUCCESS","GET_USERS_FAILED","initialStateLogUser","isLogged","isLoading","email","error","initialStateFetch","users","loading","rootReducer","combineReducers","logUser","state","action","type","message","logInRequest","payload","logOut","TOKEN_KEY","fetchUsers","logInSaga","logOutSaga","handleLogInOut","userSaga","rootSaga","getPhones","fetch","headers","Accept","then","response","json","data","catch","e","console","log","toString","delay","call","put","localStorage","setItem","removeItem","takeEvery","all","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","logger","run","PublicRoute","Component","component","restricted","rest","useSelector","render","props","to","pathname","PrivateRoute","SignIn","useHistory","useForm","register","handleSubmit","watch","errors","formState","emailValue","dispatch","useDispatch","onSubmit","className","validate","required","value","length","isCorrect","test","capital","search","small","digits","password","Book","phones","sort","a","b","name","last","localeCompare","useEffect","map","i","id","phone","slice","first","Home","onClick","connect","getItem","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb47d964.chunk.js","sourcesContent":["export const LOG_IN_REQUEST = 'LOG_IN_REQUEST';\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport const LOG_IN_FAILED = 'LOG_IN_FAILED';\n\nexport const LOG_OUT = 'LOG_OUT';\nexport const GET_PHONES = 'GET_PHONES';\n\nexport const ROUTES = {\n    main: '/',\n    home: '/home',\n    login: '/login',\n    projectName: '/phone_book' // webstorm adds it\n}\n\nexport const GET_USERS_REQUESTED = 'GET_USERS_REQUESTED';\nexport const GET_USERS_SUCCESS = 'GET_USERS_SUCCESS';\nexport const GET_USERS_FAILED = 'GET_USERS_FAILED';","import { combineReducers } from 'redux';\nimport {GET_PHONES, LOG_IN_REQUEST, LOG_IN_FAILED, LOG_IN_SUCCESS, LOG_OUT, GET_USERS_REQUESTED,GET_USERS_SUCCESS, GET_USERS_FAILED} from './constants';\nimport {IPerson} from \"./containers/App\";\nexport const initialStateLogUser = {\n  isLogged: false,\n  isLoading: false,\n  email: '',\n  error: null,\n};\n\ntype LogUserArgsType = {\n  type: typeof LOG_IN_REQUEST | typeof LOG_IN_SUCCESS | typeof LOG_IN_FAILED | typeof LOG_OUT\n  error: null | string\n  message: string\n}\n\ntype LogUserReturnType = {\n  isLogged?: boolean,\n  isLoading?: boolean,\n  email: string,\n  error?:  null | string\n}\n\nexport const logUser = (state = initialStateLogUser, action: LogUserArgsType): LogUserReturnType => {\n  switch (action.type) {\n    case LOG_IN_REQUEST:\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case LOG_IN_SUCCESS:\n      return {\n        ...state,\n        isLoading: false,\n        isLogged: true,\n      };\n    case LOG_IN_FAILED:\n      return {\n        ...state,\n        isLoading: false,\n        isLogged: false,\n        error: action.message\n      };\n    case LOG_OUT:\n      return {\n        ...state,\n        isLogged: false,\n      };\n    default:\n      return state;\n  }\n};\n\nconst initialStateFetch = {\n  users: [],\n  loading: false,\n  error: null,\n}\ntype UsersArgsType = {\n  type: typeof GET_USERS_SUCCESS | typeof GET_USERS_FAILED | typeof GET_USERS_REQUESTED,\n  users?: Array<IPerson>,\n  message: string,\n}\n\ntype UsersReturnType = {\n  loading?: boolean,\n  users?: Array<IPerson>,\n  error?: string | null,\n}\n\nexport function users(state = initialStateFetch, action: UsersArgsType): UsersReturnType {\n  switch (action.type) {\n    case GET_USERS_REQUESTED:\n      return {\n        ...state,\n        loading: true,\n      }\n    case GET_USERS_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        users: action.users\n      }\n    case GET_USERS_FAILED:\n      return {\n        ...state,\n        loading: false,\n        error: action.message,\n      }\n    default:\n      return state\n  }\n}\n\nexport const rootReducer = combineReducers({\n  logUser,\n  users,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>","import { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILED, LOG_OUT, GET_USERS_REQUESTED } from './constants';\n/*\ntype LogInType = {\n    type: typeof LOG_IN,\n    payload: boolean,\n}\ntype LogOutType = {\n    type: typeof LOG_OUT,\n}\ntype GetUsersType = {\n    type: typeof GET_USERS_REQUESTED,\n}\ntype ActionsType = LogInType | LogOutType | GetUsersType;\n*/\n\n\nexport const logInRequest = (email = ''): any => ({ type: LOG_IN_REQUEST, payload: email /*no need in it ...?*/}); //called in components, saga listens\nexport const logInSuccess = (): any => ({ type: LOG_IN_SUCCESS });\nexport const logInFailed = (): any => ({ type: LOG_IN_FAILED});\n\nexport const logOut = (): any => ({type: LOG_OUT})\n\nexport const getUsers = (): any => ({type: GET_USERS_REQUESTED})\n\n","const TOKEN_KEY = 'current user';\n\nexport const loginToStorage = (/*/email: string*/): void => {\n  localStorage.setItem(TOKEN_KEY, /*email*/ 'some email');\n};\n\nexport const logoutOfStorage = (): void => {\n  localStorage.removeItem(TOKEN_KEY);\n};\n\nexport const isInStorage = (): boolean => {\n  if (localStorage.getItem(TOKEN_KEY)) {\n    return true;\n  }\n\n  return false;\n};\n","import { put, takeEvery, all, call, delay } from 'redux-saga/effects'\nimport {GET_PHONES,\n    GET_USERS_FAILED,\n    GET_USERS_REQUESTED,\n    GET_USERS_SUCCESS,\n    LOG_IN_REQUEST,\n    LOG_IN_SUCCESS,\n    LOG_IN_FAILED,\n    LOG_OUT,\n    ROUTES} from \"./constants\";\nimport {logInRequest, logInSuccess, logInFailed, logOut} from \"./actions\";\nimport {loginToStorage, logoutOfStorage} from \"./utils\";\nimport {} from \"./constants\";\nimport {IPerson} from \"./containers/App\";\nimport store from \"./store\";\n\ntype FetchUserParams = {\n    type: string,\n    users?: Array<IPerson>,\n    message?: string\n}\n//const state = store.getState();\nconst URL = 'http://localhost:3000/phones.json';\n const getPhones = () => {\n        return fetch(URL, {\n            headers: {\n                'Content-Type': 'application/json',\n                Accept: 'application/json',\n            },\n        })\n            .then(response => response.json())\n            .then(data => data)\n            .catch(e => {\n                console.log(e.toString());\n            });\n};\n\nfunction* fetchUsers(action: FetchUserParams): any {//Since a generator function can technically return a dynamic value depending on how next() is called, Redux-Saga had decided it best to use type any rather than try to infer a type.\n    try {\n        yield delay(1000)\n        const users = yield call(getPhones);\n        yield put({type: GET_USERS_SUCCESS, users: users}); //put === dispatch(action.type, payload)\n    } catch (e) {\n        yield put({type: GET_USERS_FAILED, error: e.message});\n    }\n}\n\nfunction* logInSaga(action: any):any {\n    try {\n        yield delay(1000);\n        loginToStorage()\n        yield put({type: LOG_IN_SUCCESS});\n    } catch (e) {\n        yield put({type: LOG_IN_FAILED, message: e.message});\n    }\n}\nfunction* logOutSaga(action: any):any {\n    logoutOfStorage();\n     yield put(logOut())\n}\n\nfunction* handleLogInOut(): any {   //watcher\n    yield takeEvery(LOG_IN_REQUEST, logInSaga);\n    yield takeEvery(LOG_OUT, logOutSaga);\n}\n\nfunction* userSaga(): any { //watcher\n    yield takeEvery(GET_USERS_REQUESTED, fetchUsers); //listens to action with action.type GET_USERS_REQUESTED,  and when it is called calls function  fetchUsers\n}                                                   //action is still being dispatched\n\nexport default function* rootSaga(): any {\n    yield all([\n        userSaga(), //fetch\n        handleLogInOut(),\n    ])\n}","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport {logger} from \"redux-logger/src\";\nimport { rootReducer} from './reducers';\n\nimport createSagaMiddleware from 'redux-saga'\nimport rootSaga from './sagas'\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(logger, sagaMiddleware)));\n\nsagaMiddleware.run(rootSaga);\n\nexport const sagaAction = type => store.dispatch({type}) //saga\n\nexport default store;\n","import React, {useEffect} from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { isInStorage } from '../utils';\nimport {ROUTES} from \"../constants\";\nimport {useSelector} from \"react-redux\";\ntype PublicRouteProps = {\n  component: any;\n  restricted: any;\n  path: string;\n  exact: boolean;\n};\nconst PublicRoute = ({ component: Component, restricted, ...rest }: PublicRouteProps): React.ReactElement => {\n  const state: any = useSelector(state=> state);\n  return (\n    <Route\n      {...rest}\n      render={props => (state.logUser.isLogged && restricted\n          ? <Redirect to={{pathname: ROUTES.main}} />\n          : <Component {...props} />)}\n    />\n  );\n};\n\nexport default PublicRoute;\n","import React, {useEffect} from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport store from \"../store\";\nimport {ROUTES} from '../constants'\nimport {useSelector} from \"react-redux\";\n\ntype PrivateRouteProps = {\n  component: any;\n  path: string;\n  exact: boolean;\n};\n\nconst PrivateRoute = ({\n  component: Component,\n  ...rest\n}: PrivateRouteProps): React.ReactElement => {\n    const state: any = useSelector(state => state);\n\n  return (\n    <Route\n      {...rest}\n      render={props =>\n          state.logUser.isLogged ? (\n          <Component  {...props} />\n        ) : (\n          <Redirect to={{pathname: ROUTES.login}} />\n        )\n      }\n    />\n  );\n}\n\nexport default PrivateRoute;\n\n","import React, {FC, useEffect} from 'react'\nimport store from \"../store\";\n//import {LOG_IN} from \"../constants\";\nimport {logInRequest} from \"../actions\";\nimport {loginToStorage} from \"../utils\";\nimport {useForm} from \"react-hook-form\";\nimport {ROUTES} from \"../constants\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useHistory} from \"react-router-dom\"\nimport {RootState} from \"../reducers\";\nexport const SignIn:FC = (props: any) => {\n\n    const history = useHistory();\n    const { register, handleSubmit, watch, formState: { errors } } = useForm();\n    const emailValue = watch(\"email\");\n    const dispatch = useDispatch();\n    const isLoading = useSelector((state: RootState | any) => state.logUser.isLoading)\n    const handleLogin = () => {\n        dispatch(logInRequest(emailValue)); // saga watcher listens\n    }\n    return (\n        <>\n            <form onSubmit={handleSubmit(handleLogin)} className=\"form\"> {/* your form submit function which will invoke after successful validation*/}\n                {/* register your input into the hook by invoking the \"register\" function */}\n                <input\n                    {...register(\"email\", { //name=== errors obj property containing all validation errors for this specific field\n                        validate: {\n                            required: value => value.length || 'This field is required', //so validation need to return false to be passed\n                            isCorrect: value => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) || 'Invalid email address'\n                        }\n                    })}\n                    className=\"form__field\"\n                />\n                {/* errors will return when field validation fails  */}\n                {errors.email && <span>{errors.email?.message}</span>} {/*errors.email?.message - one entity for all possible messages*/}\n                {/* include validation with required or other standard HTML validation rules */}\n                <input\n                    {...register(\"password\", {\n                        validate: {\n                            required: value => value.length || 'This field is required',\n                            length: value => value.length > 8 || 'Needs at least 8 symbols',\n                            capital: value => value.search(/[A-Z]/) !== -1 || 'Must contain at least 1 capital letter',\n                            small: value => value.search(/[a-z]/) !== -1 || 'Must contain at least 1 small letter',\n                            digits: value => value.search(/[0-9]/) !== -1 || 'Must contain at least 1 digit',\n                        }\n                    })}\n                    className=\"form__field\"/>\n                {errors.password && <span>{errors.password?.message}</span>}\n                <input type=\"submit\" className=\"form__button\"/>\n            </form>\n            {isLoading\n                ? <div className=\"dialog\">\n                    <div className=\"dialog__overlay\">\n                        <div className=\"dialog__window\">\n                            <p className=\"dialog__msg\">Getting access...</p>\n                        </div>\n                    </div>\n                </div>\n                : <></>\n            }\n\n        </>\n    )\n}\n\n\n\n\n","import React, { useEffect } from 'react';\nimport { IPerson } from '../containers/App';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector} from \"react-redux\";\nimport {getUsers} from \"../actions\";\nimport {ROUTES} from \"../constants\";\nimport {RootState} from \"../reducers\";\n\ninterface BookProps {\n  phones: Array<IPerson>;\n}\n\n\nconst Book = (): React.ReactElement => {\n const dispatch = useDispatch();\n const phones = useSelector((state: RootState | any) => state.users.users.phones?.sort((a: any, b: any) => a.name.last.localeCompare(b.name.last)))\n    const users = useSelector((state: RootState | any) => state.users.users);\n  const loading = useSelector((state: RootState | any)=> state.users.loading);\n  const error = useSelector((state: RootState | any) => state.users.error);\n\n  useEffect(() => {\n    dispatch(getUsers());\n  }, [])\n\n\n  return (\n    <main className='main'>\n        <div className=\"bg\">\n          <div className='container'>\n              <Link to={{pathname: ROUTES.home}} className='main__link'>Go home</Link>\n          </div>\n        </div>\n        <div className='container'>\n            {loading\n                ?  <p>Wait for it...</p>\n                :  (\n                    <ul>\n                        {phones?.map(({id, name, phone}: IPerson, i: number) => {\n                            if (phones[i - 1]?.name.last.slice(0, 1) !== phones[i]?.name.last.slice(0, 1)) {\n                                return (\n                                    <li key={id} className='withSeparator'>\n                                        <p>{phones[i].name.last.slice(0, 1)} </p>\n                                        <ul className='firstInRow'>\n                                            <li>\n                                                {name.last} {name.first}, phone: {phone}\n                                            </li>\n                                        </ul>\n                                    </li>\n                                );\n                            } else {\n                                return (\n                                    <li key={id}>\n                                        {name.last} {name.first}, phone: {phone}\n                                    </li>\n                                );\n                            }\n                        })}\n                    </ul>\n                )\n            }\n\n      </div>\n    </main>\n  );\n};\n\nexport default Book;\n","import React, {Component, useEffect} from 'react';\nimport { logoutOfStorage,  isInStorage } from '../utils';\nimport { Link} from 'react-router-dom';\nimport store from \"../store\";\n//import {LOG_OUT} from \"../constants\";\nimport {logOut} from \"../actions\";\nimport {ROUTES} from \"../constants\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\n// RouteComponentProps<MatchParams>\nconst Home = () =>  {\n    const dispatch = useDispatch();\n\n  const handleLogout = (): void => {\n    dispatch(logOut()); // saga watcher listens\n  };\n  const state: any = useSelector(state => state);\n  return (\n      <div>\n        <h1>Home</h1>\n        {state.logUser.isLogged ? (\n            <button onClick={() => handleLogout()}>Click here to log out</button>\n        ) : (\n            <Link to={{pathname: ROUTES.login}}>Go to sign in page</Link>\n        )}\n      </div>\n  );\n\n}\n\nexport default Home;\n","import React, {useEffect } from 'react';\nimport './App.css';\nimport { Redirect, Switch } from 'react-router-dom';\nimport {connect, useDispatch, useSelector} from 'react-redux';\nimport PublicRoute from '../components/PublicRoute';\nimport PrivateRoute from '../components/PrivateRoute';\nimport {SignIn} from '../components/SignIn';\nimport {isInStorage} from \"../utils\";\nimport Book from '../components/Book';\nimport Home from './Home';\nimport {ROUTES} from \"../constants\";\nimport {logInRequest} from \"../actions\";\ninterface IName {\n  first: string;\n  last: string;\n}\n\nexport interface IPerson {\n  id: string;\n  isActive: boolean;\n  age?: number;\n  name: IName;\n  company?: string;\n  email?: string;\n  phone: string;\n  address?: string;\n  registered: string;\n}\ninterface GlobalState {\n    logUser: ILogUser,\n    setPhones: ISetPhones,\n    counter: number,\n}\ninterface ILogUser {\n    isLogged: boolean\n}\ninterface ISetPhones {\n    phones: Array<IPerson>\n}\n\nconst mapStateToProps = (state: any) => ({\n    phones: state.users.users.phones,\n    isLogged: state.logUser.isLogged,\n\n});\n\n\nconst App = ({ phones }: { phones: Array<IPerson> }): React.ReactElement => {\n    const state = useSelector(state => state);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (isInStorage()) {\n            dispatch(logInRequest()) // saga watcher listens\n        }\n    }, [dispatch])\n\n  return (\n      <>\n        <Switch>\n            <PrivateRoute component={Book} path={ROUTES.main} exact  />\n            <PublicRoute restricted={false} component={Home} path={ROUTES.home} exact />\n            <PublicRoute restricted={true} component={SignIn} path={ROUTES.login} exact />\n          <Redirect path={ROUTES.projectName} to={{pathname: ROUTES.login}} />\n        </Switch>\n      </>\n  );\n};\n\n\n\nexport default connect(mapStateToProps)(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root') as HTMLElement\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}